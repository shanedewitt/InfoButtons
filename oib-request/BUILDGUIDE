-------------------------------------------------------------------------
(c) 2011-2017 OpenInfobutton Project, Biomedical Informatics, University of Utah
Contact: <andrew.iskander@utah.edu>
Biomedical Informatics
421 Wakara Way, Ste 140
Salt Lake City, UT 84108-3514
(801) 581-4080
-------------------------------------------------------------------------

Changes for version 2.2
-----------------------

-added property db creation script to instructions

Changes for version 2.1
-----------------------

-changed JDK7 to JDK8

-added instructions to build the UTS REST Terminology Services module first

-removed building with CMake as that has not been maintained for several versions

Changes for version 2.0
-----------------------

-added two new database scripts, profile_black_list and users

-added new web services for authentication

-bug fixes and optimizations to profile loading


Changes for version 1.7
-----------------------

-changes to database naming and structure, if you would like to keep your existing profiles database, please refer to the MIGRATIONGUIDE
found in this folder for coming from the previous version. 

-Optimizations to UMLS

-various bug fixes 


Changes for version 1.6
-----------------------

-Modules have been refactored further to cut down on autogenerated source code in the repository
-Unit tests have been added to test functionality in each individual module
-Jacoco and Checkstyle plugins have been integrated to ensure compliance with OSEHRA development standards
-Parameters for database and UMLS connections are now found in the master POM, rather than in the submodules


Build Guide For OpenInfobutton Manager

1 - Initial Setup
2 - Building

Initial Setup
-------------

1) Clone the entire InfoButtons 2.3 branch. 

2) Install JDK 8.0, which can be downloaded from 
   http://www.oracle.com/technetwork/java/javase/downloads/index.html
   Use version of 1.8u131 JDK or higher.

3) Make sure that your JAVA_HOME environment variable is set to the newly
   installed JDK location, and that your PATH includes %JAVA_HOME%\bin
   (windows) or $JAVA_HOME$/bin (unix).

4) Install Maven 3.0, which can be downloaded from 
   http://maven.apache.org/download.html. Make sure that your PATH includes 
   the $MVN_HOME/bin directory. 
   
5) Install a MySQL 5.0 server instance on the server you're building.
   http://dev.mysql.com/downloads/mysql/
   
6) If you are behind a proxy, keep in mind that additional setup will be
   required as the build process and the service itself requires an unhindered 
   connection to the internet.

7) Obtain a UTS account from here, 
   https://uts.nlm.nih.gov/home.html
   
8) Create a Github account.

9) If you are upgrading from an older version of OpenInfobutton you MUST COMPLETELY
WIPE YOUR ENTIRE LOCAL MAVEN REPOSITORY. You WILL encounter build errors if you dont.
   

Building
--------

1) Execute the following SQL scripts found in the InfoButtons/DeploymentPackage/dbScripts directory IN THE FOLLOWING ORDER:

	1. resource_profile.sql	
	2. valueset_and_log.sql
	3. profile_black_list.sql
	4. userAuthentication.sql	
	5. oib_app_property.sql
	
   If you are upgrading from OIB 2.0, you only need to execute,
   
   migration2021.sql
   oib_app_property.sql
   
   You may also drop the 3 old valueset tables: concept, subset, and subsetmember but this is not necessary
   and keeping them will not hurt anything which is why I haven't included it in the script.

2) Navigate to the InfoButtons/rest-terminology-services directory and run
	
	$> mvn clean install -Dmaven.test.skip=true

3) Navigate back to the oib-request module directory (this directory)

4) The oib-request module's master pom.xml includes the following configurable settings,

		<datasource1.url>jdbc:mysql://localhost:3306/valueset_and_log</datasource1.url>
		<datasource1.driver>com.mysql.jdbc.Driver</datasource1.driver>
		<datasource1.user></datasource1.user>
		<datasource1.password></datasource1.password>
		
		<datasource2.url>jdbc:mysql://localhost:3306/resource_profile</datasource2.url>
		<datasource2.driver>com.mysql.jdbc.Driver</datasource2.driver>
		<datasource2.user></datasource2.user>
		<datasource2.password></datasource2.password>

		<!-- ============== Value Set Configuration =================
		The following lines allow you to choose which value set implementation you would like
		to use in your configuration. The default uses valuesets hosted on github
		that are centrally managed for your convenience. You can also switch to the local database
		implementation by commenting out the default implementation and uncommenting the database
		implementation
		=== Default Value Set Implementation ===
		Uses github and requires a github username and password. Comment out
		to use local database implementation instead.
		-->

		<service.subsetImplementation>cloudValueSets</service.subsetImplementation>
		<github.username></github.username>
		<github.password></github.password>

		<!--
		==== Local database implementation ====
		Remove comment to use and make sure to also comment out default implementation
		-->

		<!--<service.subsetImplementation>databaseValueSets</service.subsetImplementation>-->

		<!-- ================= End Value Set Configuration ================= -->

		<umls.username></umls.username>
		<umls.password></umls.password>
   
   Set these to match your local database connection parameters, preferred Value Set method, Github account, and UTS account. Note that Github and UTS credentials can also be set via LITE which persist them to the app property database. Credentials set in LITE override those set in the POM.

5) Run

         $> mvn clean install -Dmaven.test.skip=true

   This will compile the OpenInfobutton Manager and build the WAR.

   It usually takes some time for maven to download required dependencies 
   in the first build.

6) Upon a completed build, the WAR will be found under the oib-request-service/target directory. 
   Simply deploy it to a functional Java servlet container (I recommend Tomcat 8) and you should be able to
   start firing requests at it. Alternatively, you can also use the following maven command to start an
   instance of the manager in a self contained Tomcat 8 container.
   
   mvn clean tomcat8:run-war -Ddatasource1.password=mypass -Ddatasource2.password=mypass -DskipTests
